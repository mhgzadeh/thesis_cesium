# -*- coding: utf-8 -*-
"""
**********    copyright: (C) 2022 by die STEG Stadtentwicklung GmbH     **********

                Olgastra√üe 54                        Postfach 104341
                70182 Stuttgart                      70038 Stuttgart
                Telefon 0711/21068-0            Fax 0711/21068-112
                www.steg.de

**********************************************************************************
/*********************************************************************************
 Energy
                                 A QGIS plugin
 Energie
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-27
        git sha              : $Format:%H$
        copyright            : (C) 2022 by die STEG Stadtentwicklung GmbH
        email                : mohammad.hosseingholizadeh@steg.de
 ********************************************************************************/

/*********************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ********************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from json import dumps
import json
from bs4 import BeautifulSoup
from psycopg2 import connect
from psycopg2.extras import DictCursor
from time import sleep
from datetime import datetime
import subprocess
import webbrowser

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog

from .energy_dialog import EnergyDialog
from .energy_category import EnergyCategory
from .energy_demand import EnergyDemand

from .alkis_raw_data import EnergyRawData

from .city_gml_extraction import CityGMLExtraction

from .database import Database

from .local_database_info import DB_MAIN

from .alkis_map import StegMap

import os.path

import subprocess


class Energy:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """
        Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.energy_dialog = EnergyDialog()
        self.energy_demand = EnergyDemand()
        self.energy_category = EnergyCategory()
        self.energy_raw_data = EnergyRawData()
        self.energy_map = StegMap()

        self.city_gml_extraction = CityGMLExtraction()

        self.database = Database()

        self.db_main_info = {
            'HOST': None, 'PORT': None, 'NAME': None, 'USER': None, 'PASS': None,
        }

        self.plain_line_counter = 0

        self.city_gml_file_path = None
        self.city_gml_folder_path = None
        self.city_gml_file_name = None
        self.city_gml_output_file_tmp = None
        self.gml_buildings = None
        self.conn_db_main = None
        self.cur_db_main = None
        self.output_city_gml_edited = None
        self.pv_panel_layer_path = None

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Energy_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&die STEG Energie')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Energie', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    """
    *******************************************************************************************************************
                                           PyQt5 Gui (Energy plugin) setting
    *******************************************************************************************************************
    """

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Energie_2/plugin_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Energie'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Get the path file and store it in self.layer_path (Mohammad Custom Code)
        self.energy_dialog.configDbConnectionButton.clicked.connect(self.__database_connection_checker)
        self.energy_dialog.buildingFileNameButton.clicked.connect(self.__update_building_file_path_name)
        self.energy_dialog.gmlFileNameButton.clicked.connect(self.__city_gml_file_path_name)
        self.energy_dialog.updateGmlForSimstadtButton.clicked.connect(self.__update_city_gml_file_for_simstadt)
        self.energy_dialog.calculateEnergyFromSimstadtButton.clicked.connect(self.__calculate_energy_by_simstadt)
        self.energy_dialog.pvPanelButton.clicked.connect(self.__pv_panel_polygon_file_path_name)
        self.energy_dialog.findBestLocPanelButton.clicked.connect(self.__find_best_location_panel)
        self.energy_dialog.updateGmlForCesiumButton.clicked.connect(self.__update_city_gml_file_for_cesium)
        self.energy_dialog.openCesiumButton.clicked.connect(self.__open_cesium)

        # Set the minimum and maximum values for progress bar (Mohammad Custom Code)
        self.energy_dialog.energyCalculatorProgressBar.setMinimum(0)
        self.energy_dialog.energyCalculatorProgressBar.setMaximum(1)
        self.energy_dialog.energyCalculatorProgressBar.setValue(0)

        self.energy_dialog.mapPdfGeneratorProgressBar.setMinimum(0)
        self.energy_dialog.mapPdfGeneratorProgressBar.setMaximum(10)
        self.energy_dialog.mapPdfGeneratorProgressBar.setValue(0)

        # City model
        self.energy_dialog.gmlExtractionProgressBar.setMinimum(0)
        self.energy_dialog.gmlExtractionProgressBar.setMaximum(1)
        self.energy_dialog.gmlExtractionProgressBar.setValue(0)

        self.energy_dialog.gmlToDatabaseProgressBar.setMinimum(0)
        self.energy_dialog.gmlToDatabaseProgressBar.setMaximum(1)
        self.energy_dialog.gmlToDatabaseProgressBar.setValue(0)

        self.energy_dialog.updateGmlForSimstadtProgressBar.setMinimum(0)
        self.energy_dialog.updateGmlForSimstadtProgressBar.setMaximum(1)
        self.energy_dialog.updateGmlForSimstadtProgressBar.setValue(0)

        self.energy_dialog.calculateEnergySimstadtProgressBar.setMinimum(0)
        self.energy_dialog.calculateEnergySimstadtProgressBar.setMaximum(1)
        self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(0)

        self.energy_dialog.updateGmlForCesiumProgressBar.setMinimum(0)
        self.energy_dialog.updateGmlForCesiumProgressBar.setMaximum(1)
        self.energy_dialog.updateGmlForCesiumProgressBar.setValue(0)

        self.energy_dialog.openCesiumProgressBar.setMinimum(0)
        self.energy_dialog.openCesiumProgressBar.setMaximum(1)
        self.energy_dialog.openCesiumProgressBar.setValue(0)

        self.energy_dialog.findBestLocPanelProgressBar.setMinimum(0)
        self.energy_dialog.findBestLocPanelProgressBar.setMaximum(1)
        self.energy_dialog.findBestLocPanelProgressBar.setValue(0)

        # Run the instance of energy_calculator to generate energy values with or without xlsx file
        # (Mohammad Custom Code)
        self.energy_dialog.buildingEnergyCalculatorButton.clicked.connect(self.__calculate_energy_runner)
        self.energy_dialog.gmlExtractionButton.clicked.connect(self.__extract_city_gml_file)
        self.energy_dialog.gmlToDatabaseButton.clicked.connect(self.__export_gml_to_database)

        # Create layout categories (Mohammad Custom Code)
        self.energy_dialog.energyLayerCategoriesGeneratorButton.clicked.connect(self.__category_generator)

        # Load raw data with predifined symbology (Mohammad Custom Code)
        self.energy_dialog.landparcelLoaderButton.clicked.connect(self.__load_landparcel_with_style)
        self.energy_dialog.buildingLoaderButton.clicked.connect(self.__load_building_with_style)
        self.energy_dialog.streetNameLoaderButton.clicked.connect(self.__load_street_name_with_style)
        self.energy_dialog.buildingNumberLoaderButton.clicked.connect(self.__load_building_number_with_style)
        self.energy_dialog.landparcelNumberLoaderButton.clicked.connect(self.__load_land_parcel_number_with_style)
        self.energy_dialog.boundryLoaderButton.clicked.connect(self.__load_boundary_with_style)

        # Generate layout PDF files (Mohammad Custom Code)
        self.energy_dialog.planAreaTypeComboBox.addItems(['Stadt', 'Gemeinde'])
        self.energy_dialog.planAreaTypeComboBox.currentIndexChanged.connect(self.__update_plan_area_name_label)

        self.energy_dialog.buildingClassesPushButton.clicked.connect(self.__create_building_classes_layout_pdf)
        self.energy_dialog.energyAbsolutePushButton.clicked.connect(self.__create_energy_absolute_layout_pdf)
        self.energy_dialog.energySpecificPushButton.clicked.connect(self.__create_energy_specific_layout_pdf)

        self.energy_dialog.solarThermicPushButton.clicked.connect(self.__create_solar_thermic_layout_pdf)
        self.energy_dialog.photovoltaicPushButton.clicked.connect(self.__create_photovoltaic_layout_pdf)

        self.energy_dialog.buildingWindowPushButton.clicked.connect(self.__create_building_window_layout_pdf)
        self.energy_dialog.buildingOuterWallsPushButton.clicked.connect(self.__create_building_outer_walls_layout_pdf)
        self.energy_dialog.buildingRoofsPushButton.clicked.connect(self.__create_building_roofs_layout_pdf)
        self.energy_dialog.buildingCellerCeilingPushButton.clicked.connect(
            self.__create_building_celler_ceiling_layout_pdf
        )

        self.energy_dialog.burningValuePushButton.clicked.connect(self.__create_burning_value_layout_pdf)

        self.energy_dialog.exportAllMapsPushButton.clicked.connect(self.__create_all_layouts_pdf)

        # will be set False in run()
        self.first_start = True

    """
    *******************************************************************************************************************
                                            Plugin Configuration
    *******************************************************************************************************************
    """

    def __database_connection_checker(self):
        """
        check whether the database connection is successful or not
        :param DB_INFO: a dic containing the db information
        :return: ---
        """
        try:
            self.plain_line_counter += 1
            self.db_main_info["HOST"] = self.energy_dialog.configHostLineEdit.text()
            self.db_main_info["PORT"] = self.energy_dialog.configPortLineEdit.text()
            self.db_main_info["NAME"] = self.energy_dialog.configDbNameLineEdit.text()
            self.db_main_info["USER"] = self.energy_dialog.configUserLineEdit.text()
            self.db_main_info["PASS"] = self.energy_dialog.configPassLineEdit.text()
            print(self.db_main_info)
            try:
                self.conn_db_main = self.database.connector(self.db_main_info)

                msg_label = "Erfolgreiche Verbindung mit der Datenbank"
                self.energy_dialog.configDbConnectionLabel.setText(msg_label)
                self.energy_dialog.configDbConnectionLabel.setStyleSheet(
                    "color: rgb(252, 252, 252); background-color: green"
                )
                msg_logger = "Successfully connected to the database"
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg_logger}\n')
            except Exception as error_1:
                msg_label = "Ist nicht verbunden. √úberpr√ºfe die Verbindungsdetails und versuch erneut"
                self.energy_dialog.configDbConnectionLabel.setText(msg_label)
                self.energy_dialog.configDbConnectionLabel.setStyleSheet(
                    "color: rgb(252, 252, 252); background-color: red"
                )
                msg_logger = "(~~warning~~) Does not connected to the database. Check the database credential and " \
                             "try again"
                self.energy_dialog.plainTextEdit.appendPlainText(
                    f'** {self.plain_line_counter} - {msg_logger} \n {error_1} \n'
                )
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    """
    *******************************************************************************************************************
                                            ALKIS Data
    *******************************************************************************************************************
    """

    """
    *******************************************************************************************************************
                                            Import Raw Data
    *******************************************************************************************************************
    """

    def __load_landparcel_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.landparcel()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __load_building_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.building()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __load_street_name_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.street_name()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __load_building_number_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.building_number()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __load_land_parcel_number_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.landparcel_number()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __load_boundary_with_style(self):
        self.plain_line_counter += 1
        try:
            loading_msg = self.energy_raw_data.boundry()
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    """
    *******************************************************************************************************************
                                            Calculate Energy Demand
    *******************************************************************************************************************
    """

    def __update_building_file_path_name(self):
        """
        (Mohammad Custom function)
        save the path of layer in self.energy_demand.layer_path
        save the project folder path in self.energy_demand.project_folder_path
        save the geodata folder path in self.energy_demand.geodata_folder_path
        Rename the file path in plugin window and reset the progress bar value to zero
        """
        self.plain_line_counter += 1
        try:
            layer_path = self.energy_demand.get_layer_path()
            if layer_path:
                self.energy_demand.layer_path = layer_path
                self.energy_dialog.buildingFileNameLabel.setText(self.energy_demand.layer_path)
                self.energy_demand.project_folder_path = self.energy_demand.find_project_folder_path(
                    self.energy_demand.layer_path
                )
                self.energy_demand.geodata_folder_path = self.energy_demand.find_geodata_folder_path(
                    self.energy_demand.layer_path
                )
                self.energy_dialog.energyCalculatorProgressBar.setValue(0)
                msg = 'File loaded'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) The building file containing energy field data is not loaded'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __remove_energy_category_for_recalculation(self):
        """Check whether the following groups are existed"""
        if self.energy_demand.find_group('Bauteile saniert'):
            self.energy_demand.remove_group('Bauteile saniert')
        if self.energy_demand.find_group('Solar Potential'):
            self.energy_demand.remove_group('Solar Potential')
        if self.energy_demand.find_group('Heizung'):
            self.energy_demand.remove_group('Heizung')
        if self.energy_demand.find_group('Energiebedarf'):
            self.energy_demand.remove_group('Energiebedarf')

    def __calculate_energy(self):
        """
        (Mohammad Custom function)
        A raw function for calculating the energy demand and fill the fields by expressions.
        The purpuse of this function is to estimate the time of calculation for progress bar
        """
        self.plain_line_counter += 1
        self.energy_demand.delete_existing_layers(['Felddaten ohne Kalkulation', 'Energie Sanierung'])

        # remove four categories in case new data is added or new calculation wanted to be done
        self.__remove_energy_category_for_recalculation()

        self.energy_demand.executor()

        # progress bar maximum value is equivalent to the length of expression list
        self.energy_dialog.energyCalculatorProgressBar.setMaximum(len(self.energy_demand.expressions))

        progress_bar_counter = 0
        for item in self.energy_demand.expressions:
            # log formula in plain text edit
            self.plain_line_counter += 1
            self.energy_demand.field_calculator(self.energy_demand.building_energy, list((item,)))
            self.energy_dialog.plainTextEdit.appendPlainText(
                f'** {self.plain_line_counter}- {item[0]}: {item[1]}  calculated.\n')
            self.energy_dialog.energyCalculatorProgressBar.setValue(progress_bar_counter)
            progress_bar_counter += 0.9

        # Export and display the result of energy calculation as a geopackage with unique name
        building_energy_gpkg_path = \
            f"{self.energy_demand.geodata_folder_path}/{self.energy_demand.date_en()}_Energy_Sanierung.gpkg"
        self.energy_demand.export_to_geopackage(self.energy_demand.building_energy, building_energy_gpkg_path)

        calculated_energy = self.energy_demand.duplicate_layer_from_source(
            building_energy_gpkg_path, 'Energie Sanierung'
        )
        field_data = self.energy_demand.duplicate_layer_from_source(
            self.energy_demand.layer_path, 'Felddaten ohne Kalkulation'
        )

        # change the extent of map if second data added or calculated
        self.energy_category.zoom_to_layer(field_data)

        self.energy_demand.create_group_plus_add_layers(
            'Feld- und kalkulierte Daten', [calculated_energy, field_data]
        )

        # Create an instance from energy_category to pass the path of calculated building energy demand
        self.energy_category.building_energy_output_path = building_energy_gpkg_path

        # Reset the setValue of ProgressBar
        self.energy_dialog.energyCalculatorProgressBar.setValue(len(self.energy_demand.expressions))
        self.energy_dialog.progress_bar_counter = 0

        # delete the main_building laaer that is a temproray layer
        if self.energy_demand.activate_existing_layer('main_building'):
            self.energy_demand.delete_existing_layers(['main_building'])

    def __calculate_energy_runner(self):
        """
        (Mohammad Custom function)
        set an option to calculate energy demand with xlsx file or not
        """
        try:
            self.plain_line_counter += 1
            if self.energy_demand.layer_path:
                msg = f'File recieved and calculation is started.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
                if self.energy_dialog.xlsxFormatGeneratorCheckBox.isChecked():
                    self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Excel_Files')
                    excel_folder_path = f'{self.energy_demand.project_folder_path}/Excel_Files'
                    self.__calculate_energy()
                    self.energy_demand.export_to_xlsx(
                        self.energy_demand.building_energy, excel_folder_path, 'Energie_Sanierung'
                    )
                    self.plain_line_counter += 1
                    msg = f'Energy demand (geopackage format) with excel file calculated\n' \
                          f'The project folder path: {self.energy_demand.project_folder_path}\n'
                    self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
                else:
                    self.__calculate_energy()
                    msg = f'Energy demand (geopackage format) calculated\n' \
                          f'The project folder path: {self.energy_demand.project_folder_path}\n'
                    self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) The building file containing energy field data is not imported'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')
            msg = f'\t(~~warning~~) The wrong file is imported\n' \
                  f'The building file containing energy field data should be imported\n'
            self.energy_dialog.plainTextEdit.appendPlainText(msg)

    """
    *******************************************************************************************************************
                                           Generate four Categories
    *******************************************************************************************************************
    """

    def __category_generator(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Energie Sanierung'):
                self.energy_category.heating()
                self.energy_category.renoverted_building_component()
                self.energy_category.solar_potential()
                self.energy_category.energy_demand()

                msg = f'Four categories created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First of all, energy demand should be calculated'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    """
    *******************************************************************************************************************
                                           Generate 10 layouts in PDF formate
    *******************************************************************************************************************
    """

    def __update_plan_area_name_label(self):
        self.energy_dialog.planAreaNameLabel.setText(f'{self.energy_dialog.planAreaTypeComboBox.currentText()}name')

    def __create_building_classes_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Baualtersklassen'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'01_Baualtersklassen_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Baualtersklassen', 'Baualtersklassen', plan_area_type, plan_area_name,
                    'Baualtersklassen beheizte Geb√§ude', project_number, pdf_path
                )
                msg = f'Baualtersklassen pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First, four categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_energy_absolute_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Energiebedarf absolut [kWh/a]'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'02_Energiebedarf_Absolut_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Energiebedarf absolut [kWh/a]', 'Energiebedarf Absolut', plan_area_type, plan_area_name,
                    'Energiebedarf f√ºr Heizung und Warmwasser', project_number, pdf_path
                )
                msg = f'Energiebedarf absolut pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First, four categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_energy_specific_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Energiebedarf spezifisch [kWh/m¬≤a]'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'03_Energiebedarf_spezifisch_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Energiebedarf spezifisch [kWh/m¬≤a]', 'Energiebedarf spezifisch', plan_area_type, plan_area_name,
                    'Energiebedarf pro m¬≤ Nutzfl√§che',
                    project_number, pdf_path
                )
                msg = f'Energiebedarf spezifisch pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First, four categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_solar_thermic_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Solarthermie'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'05_Solarthermie_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Solarthermie', 'Solarthermie', plan_area_type, plan_area_name,
                    'Solarpotentenzial - Solarthermieanlagen',
                    project_number, pdf_path
                )
                msg = f'Solarthermie vorhanden pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First, four categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_photovoltaic_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Photovoltaik'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'06_Photovoltaik_vorhanden_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Photovoltaik', 'Photovoltaik', plan_area_type, plan_area_name,
                    'Solarpotentenzial - Photovoltaik',
                    project_number, pdf_path
                )
                msg = f'Photovoltaik vorhanden pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) First, four categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_building_window_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Fenster'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'07_Fenster_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Fenster', 'Fenster', plan_area_type, plan_area_name,
                    'Geb√§ude mit erneuerten Fenstern', project_number, pdf_path
                )
                msg = f'Fenster pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_building_outer_walls_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Au√üenw√§nde'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'08_Aussenwaende_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Au√üenw√§nde', 'Au√üenw√§nde', plan_area_type, plan_area_name,
                    'Geb√§ude Bestand - Au√üenw√§nde ged√§mmt', project_number,
                    pdf_path
                )
                msg = f'Au√üenw√§nde pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_building_roofs_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Dach'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'09_Dach_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Dach', 'Dach', plan_area_type, plan_area_name,
                    'Dach offensichtlich nacht√§glich ged√§mmt', project_number, pdf_path
                )
                msg = f'Dach pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_building_celler_ceiling_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Kellerdecke'):
                self.energy_demand.project_folder_path(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'{self.energy_demand.date_en()}_Kellerdecke.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Kellerdecke', 'Kellerdecke', plan_area_type, plan_area_name, 'Bauteile saniert', project_number,
                    pdf_path
                )
                msg = f'Kellerdecke pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_burning_value_layout_pdf(self):
        self.plain_line_counter += 1
        try:
            if self.energy_demand.activate_existing_layer('Heitzungsanlage'):
                self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                           f'10_Brennwert_{self.energy_demand.date_en()}.pdf'
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()
                self.energy_map.layout_executor(
                    'Heitzungsanlage', 'Heitzungsanlage', plan_area_type, plan_area_name,
                    'Heizungen mit Brennwerttechnik', project_number, pdf_path
                )
                msg = f'Brennwert pdf map created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __create_all_layouts_pdf(self):
        try:
            if self.energy_demand.activate_existing_layer('Baualtersklassen') and \
                    self.energy_demand.activate_existing_layer('Energiebedarf absolut [kWh/a]') and \
                    self.energy_demand.activate_existing_layer('Energieverbrauch [kWh/a]') and \
                    self.energy_demand.activate_existing_layer('Energiebedarf spezifisch [kWh/m¬≤a]') and \
                    self.energy_demand.activate_existing_layer('Solarthermie') and \
                    self.energy_demand.activate_existing_layer('Photovoltaik') and \
                    self.energy_demand.activate_existing_layer('Fenster') and \
                    self.energy_demand.activate_existing_layer('Au√üenw√§nde') and \
                    self.energy_demand.activate_existing_layer('Dach') and \
                    self.energy_demand.activate_existing_layer('Kellerdecke') and \
                    self.energy_demand.activate_existing_layer('Heitzungsanlage'):
                plan_area_type = self.energy_dialog.planAreaTypeComboBox.currentText()
                plan_area_name = self.energy_dialog.planAreaNameLineEdit.text()
                project_number = self.energy_dialog.projectNumberLineEdit.text()

                layout_infos = [
                    ('Baualtersklassen', 'Baualtersklassen', 'Baualtersklassen beheizte Geb√§ude'),
                    ('Energiebedarf absolut [kWh/a]', 'Energiebedarf absolut',
                     'Energiebedarf f√ºr Heizung und Warmwasser'),
                    ('Energiebedarf spezifisch [kWh/m¬≤a]', 'Energiebedarf spezifisch',
                     'Energiebedarf spezifisch (kWh/m¬≤a)'),
                    ('Energieverbrauch [kWh/a]', 'Energieverbrauch', 'Energieverbrauch - Absch√§tzung anhand TABULA'),
                    ('Solarthermie', 'Solarthermie ', 'Solarpotentenzial - Solarthermieanlagen'),
                    ('Photovoltaik', 'Photovoltaik', 'Solarpotentenzial- Photovoltaik'),
                    ('Fenster', 'Fenster', 'Geb√§ude mit erneuerten Fenstern'),
                    ('Au√üenw√§nde', 'Au√üenw√§nde', 'Geb√§ude Bestand - Au√üenw√§nde ged√§mmt'),
                    ('Dach', 'Dach', 'Dach offensichtlich nacht√§glich ged√§mmt'),
                    ('Heitzungsanlage', 'Heitzungsanlage', 'Heizungen mit Brennwerttechnik')
                ]
                pdf_counter = 0
                self.energy_dialog.mapPdfGeneratorProgressBar.setValue(0)
                for num, layout_info in enumerate(layout_infos):
                    print(layout_info[0], layout_info[1])
                    self.energy_demand.create_new_folder(self.energy_demand.project_folder_path, 'Pdf_Files')
                    pdf_path = f'{self.energy_demand.project_folder_path}/Pdf_Files/' \
                               f'{num + 1}_{layout_info[1]}_{self.energy_demand.date_en()}.pdf'
                    self.energy_map.layout_executor(
                        layout_info[0], layout_info[1], plan_area_type, plan_area_name, layout_info[2], project_number,
                        pdf_path
                    )
                    pdf_counter += 1
                    self.energy_dialog.mapPdfGeneratorProgressBar.setValue(pdf_counter)
                    self.plain_line_counter += 1
                    msg = f'{layout_info[0]} pdf map created'
                    self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
            else:
                self.plain_line_counter += 1
                msg = f'(~~warning~~) first categories should be created'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    """
    *******************************************************************************************************************
                                            City Model Data
    *******************************************************************************************************************
    """

    @staticmethod
    def __database_connector(database_info_dic):
        connection = connect(
            host=database_info_dic['HOST'],
            port=database_info_dic['PORT'],
            dbname=database_info_dic['NAME'],
            user=database_info_dic['USER'],
            password=database_info_dic['PASS']
        )
        return connection

    def __city_gml_file_path_name(self):
        self.plain_line_counter += 1
        try:
            self.city_gml_file_path = self.energy_demand.get_layer_path()
            self.city_gml_file_name = self.city_gml_file_path.split('/')[-1].split('.')[0]
            if self.city_gml_file_path:
                self.energy_dialog.gmlFileNameLabel.setText(self.city_gml_file_path)
                msg = 'City model (*.gml file) loaded successfully.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) City model (*.gml file) is not loaded successfully.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __extract_city_gml_file(self):
        self.plain_line_counter += 1
        try:
            if self.city_gml_file_path:
                self.energy_dialog.gmlExtractionProgressBar.setMaximum(3)
                self.energy_dialog.gmlExtractionProgressBar.setValue(1)
                self.energy_dialog.gmlFileNameLabel.setText(self.city_gml_file_path)
                self.city_gml_folder_path = self.energy_demand.find_geodata_folder_path(
                    self.city_gml_file_path
                )

                msg = 'City gml file extraction is started.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
                self.energy_dialog.gmlExtractionProgressBar.setValue(2)
                soup = self.city_gml_extraction.generate_soup_from_gml(self.city_gml_file_path)
                self.energy_dialog.gmlExtractionProgressBar.setValue(3)

                self.energy_dialog.gmlExtractionProgressBar.setMaximum(len(soup.find_all('bldg:Building')))
                self.energy_dialog.gmlExtractionProgressBar.setValue(0)

                municipality_name = self.energy_dialog.planAreaNameLineEdit.text()
                count = 0
                for item in self.city_gml_extraction.extract_city_gml_file(soup, municipality_name):
                    count += 1
                    self.energy_dialog.gmlExtractionProgressBar.setValue(count)
                    if item[-1]:
                        self.energy_dialog.plainTextEdit.appendPlainText(
                            f'** {" " * len(str(self.plain_line_counter))} - {dumps(item[0], sort_keys=True, indent=4)}\n'
                        )
                    else:
                        self.energy_dialog.plainTextEdit.appendPlainText(
                            f'** {" " * len(str(self.plain_line_counter))} - {dumps(item[0], sort_keys=True, indent=4)}\n'
                        )
                        self.gml_buildings = item[1]
                        soup = item[2]

                soup_output = soup.prettify("utf-8")
                self.city_gml_output_file_tmp = f'{self.city_gml_folder_path}/{self.city_gml_file_name}_tmp.gml'
                self.city_gml_extraction.export_soup_to_gml(self.city_gml_output_file_tmp, soup_output)

                self.plain_line_counter += 1
                msg = f'''Ground surface, wall surface, and roof surface extracted successfully from city gml file.
                \nStored in {self.city_gml_output_file_tmp}'''
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) first city model gml file should be loaded'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __export_gml_to_database(self):
        self.plain_line_counter += 1
        try:
            building_db_vars = [
                ('roofsurface', "roof_surface_wkt"),
                ('wallsurface', "wall_surface_wkt"),
                ('groundsurface', "ground_surface_wkt")
            ]
            # create connection and cursor for main database
            conn_db_main = self.__database_connector(DB_MAIN)
            cur_db_main = conn_db_main.cursor(cursor_factory=DictCursor)

            msg = 'Connected to the database successfully.'
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')

            for building_db_var in building_db_vars:
                insert_script_main = f'''
                                INSERT INTO
                                public.city_model_{building_db_var[0]}(gml_id, count, geometry, building_id)
                                VALUES (%s, %s, ST_GeomFromText(%s, 25832), %s)
                                on conflict do nothing;
                                '''
                self.energy_dialog.gmlToDatabaseProgressBar.setMaximum(len(self.gml_buildings["buildings"]))
                self.energy_dialog.gmlToDatabaseProgressBar.setValue(0)
                count = 0
                for building in self.gml_buildings["buildings"]:
                    count += 1
                    self.energy_dialog.gmlToDatabaseProgressBar.setValue(count)
                    if building[building_db_var[1]]["count"] != 0:
                        for num, feature in enumerate(building[building_db_var[1]]["coordinate"]):
                            insert_values = (
                                f'{building["gml_id"]}_{num}_{building_db_var[0]}',
                                building[building_db_var[1]]["count"],
                                feature,
                                building["gml_id"]
                            )
                            self.energy_dialog.plainTextEdit.appendPlainText(
                                f'** {" " * len(str(self.plain_line_counter))} - {insert_values} \n'
                            )
                            cur_db_main.execute(insert_script_main, insert_values)

            insert_object_model = f'''
                            INSERT INTO public.city_model_building(
                            geometry)
                            VALUES (ST_GeomFromText(%s, 25832))
                            on conflict do nothing;
                        '''

            self.plain_line_counter += 1
            msg = 'Start storing 3d data into dataset.'
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')

            self.energy_dialog.gmlToDatabaseProgressBar.setMaximum(len(self.gml_buildings["buildings"]))
            self.energy_dialog.gmlToDatabaseProgressBar.setValue(0)
            count = 0
            for building in self.gml_buildings["buildings"]:
                count += 1
                self.energy_dialog.gmlToDatabaseProgressBar.setValue(count)
                if building["building_wkt"]["count"] == 1:
                    for num, feature in enumerate(building["building_wkt"]["coordinate"]):
                        insert_values_ = (
                            feature,
                        )
                        self.energy_dialog.plainTextEdit.appendPlainText(
                            f'** {" " * len(str(self.plain_line_counter))} - {insert_values_} \n'
                        )
                        cur_db_main.execute(insert_object_model, insert_values_)
            conn_db_main.commit()
            msg = '2D and 3D city model data stored in postgis successfully.'
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')
        finally:
            if self.cur_db_main is not None:
                self.cur_db_main.close()
            if self.conn_db_main is not None:
                self.conn_db_main.close()

    def __get_record_from_db(self, db_info, schema_name_main, view_name_main, my_gml):
        try:
            # create connection and cursor for main database
            conn_db_main = self.__database_connector(db_info)
            cur_db_main = conn_db_main.cursor(cursor_factory=DictCursor)

            select_script = f''' 
                   SELECT my_gml, gml_id, function, year 
                   FROM "{schema_name_main}".{view_name_main} 
                   WHERE my_gml = '{my_gml}_0_groundsurface'; 
                   '''

            cur_db_main.execute(select_script)
            records = cur_db_main.fetchall()
            return records[0]
        except Exception as error:
            print(error)
            return False

    def __update_city_gml_file_for_simstadt(self):
        self.plain_line_counter += 1
        try:
            if self.city_gml_output_file_tmp:
                schema_name_main = 'public'
                view_name_main = 'join_alkis_city_model'

                self.energy_dialog.updateGmlForSimstadtProgressBar.setMaximum(2)
                self.energy_dialog.updateGmlForSimstadtProgressBar.setValue(1)
                with open(self.city_gml_output_file_tmp, 'r', encoding='UTF-8') as city_gml_file:
                    soup = BeautifulSoup(city_gml_file, 'xml')
                self.energy_dialog.updateGmlForSimstadtProgressBar.setValue(2)

                self.energy_dialog.updateGmlForSimstadtProgressBar.setMaximum(len(soup.find_all('bldg:Building')))
                self.energy_dialog.updateGmlForSimstadtProgressBar.setValue(0)
                count = 0
                for building_part in soup.find_all('bldg:Building'):
                    count += 1
                    self.energy_dialog.updateGmlForSimstadtProgressBar.setValue(count)
                    if "my_gml" in building_part.attrs:
                        my_gml = building_part.attrs["my_gml"]
                        print(my_gml)
                        record = self.__get_record_from_db(DB_MAIN, schema_name_main, view_name_main, my_gml)
                        if record:
                            building_part.attrs["gml:id"] = record['gml_id']
                            del building_part['my_gml']

                            function_tag = soup.new_tag('bldg:function')
                            year_tag = soup.new_tag('bldg:yearOfConstruction')
                            function_tag.string = record['function'] if record['function'] is not None else ''
                            year_tag.string = record['year'] if record['year'] is not None else ''
                            building_part.append(function_tag)
                            building_part.append(year_tag)

                output = str(soup).replace('\n', '').strip()
                self.output_city_gml_edited = f'{self.city_gml_folder_path}/{self.city_gml_file_name}_edited.gml'
                with open(self.output_city_gml_edited, "w") as file:
                    file.write(output)

                self.plain_line_counter += 1
                msg = f'''Edited city gml file contains building construction year, function, and gml id is
                      added successfully.\nStored in {self.output_city_gml_edited}'''
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) City gml file has not been edited.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __calculate_energy_by_simstadt(self):
        self.plain_line_counter += 1
        try:
            result_file_path = f'{self.city_gml_folder_path}/../result/result.json'
            if result_file_path:
                self.energy_dialog.calculateEnergySimstadtProgressBar.setMaximum(4)
                self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(1)
                sleep(2.5)
                msg = 'Connected to simstadt and georocket.db successfully.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
                self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(2)

                self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(0)
                self.energy_dialog.calculateEnergySimstadtProgressBar.setMaximum(2)
                self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(1)
                with open(result_file_path) as json_file:
                    json_records = json.load(json_file)
                self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(2)

                self.plain_line_counter += 1
                msg = 'Energy demand for each building calculated successfully by simstadt'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
                self.energy_dialog.calculateEnergySimstadtProgressBar.setMaximum(len(json_records["buildings"]))
                simstadt_demands = []
                count = 0
                counter = 0
                for building in json_records["buildings"]:
                    counter += 1
                    self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(counter)
                    if 'monthlyHeating' in building["parts"][0]["attributes"].keys():
                        count += 1
                        energy_demand = int(sum(building["parts"][0]["attributes"]["monthlyHeating"]))
                        simstadt_demands.append((count, building["id"], energy_demand))

                schema_name_main = 'public'
                conn_db_main = None
                cur_db_main = None

                try:
                    # create connection and cursor for main database
                    conn_db_main = self.__database_connector(DB_MAIN)
                    cur_db_main = conn_db_main.cursor(cursor_factory=DictCursor)
                    print(cur_db_main)

                    insert_table_main = 'energy_citymodel'
                    insert_values_main = ("gml_id", "demand", "created_time", "modified_time")
                    insert_script_main = f'''
                    INSERT INTO 
                    "{schema_name_main}".{insert_table_main}({', '.join(insert_values_main)}) 
                    VALUES ({("%s, " * len(insert_values_main))[:-2]})
                    on conflict do nothing;
                    '''

                    self.energy_dialog.calculateEnergySimstadtProgressBar.setMaximum(len(simstadt_demands))
                    counter = 0
                    for energy_demand in simstadt_demands:
                        counter += 1
                        self.energy_dialog.calculateEnergySimstadtProgressBar.setValue(counter)
                        insert_values = (
                            energy_demand[1], energy_demand[2], datetime.now(), datetime.now()
                        )
                        msg = f'{insert_values}'
                        self.energy_dialog.plainTextEdit.appendPlainText(
                            f'** {" " * len(str(self.plain_line_counter))} - {msg} \n'
                        )
                        print(insert_values)
                        cur_db_main.execute(insert_script_main, insert_values)

                    conn_db_main.commit()
                    self.plain_line_counter += 1
                    msg = 'Energy demand calculated by simstadt stored in database successfully'
                    self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
                    print('Successfully finished')
                except Exception as error:
                    print(error)
                finally:
                    if cur_db_main is not None:
                        cur_db_main.close()
                    if conn_db_main is not None:
                        conn_db_main.close()

            else:
                msg = '(~~warning~~) Cannot connected to simstadt. Check the connection of Georocket or Simstadt API'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __pv_panel_polygon_file_path_name(self):
        self.plain_line_counter += 1
        try:
            self.pv_panel_layer_path = self.energy_demand.get_layer_path()
            self.pv_panel_file_name = self.pv_panel_layer_path.split('/')[-1].split('.')[0]
            if self.pv_panel_layer_path:
                self.energy_dialog.pvPanelLabel.setText(self.pv_panel_layer_path)
                msg = 'The polygon of pv panels (*.shp *.gpkg file) loaded successfully.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) The polygon of pv panels (*.shp *.gpkg file) is not loaded successfully.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __find_best_location_panel(self):
        self.energy_dialog.findBestLocPanelProgressBar.setMaximum(4)
        self.plain_line_counter += 1
        self.energy_dialog.findBestLocPanelProgressBar.setValue(1)
        sleep(0.5)
        msg = 'Regular points generated successfully.'
        self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')

        self.plain_line_counter += 1
        self.energy_dialog.findBestLocPanelProgressBar.setValue(2)
        sleep(0.7)
        msg = '3 m buffer generated successfully.'
        self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')

        self.plain_line_counter += 1
        self.energy_dialog.findBestLocPanelProgressBar.setValue(3)
        sleep(1.8)
        msg = 'points inside 3 m buffer generated successfully.'
        self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        self.energy_dialog.findBestLocPanelProgressBar.setValue(4)

    def __update_city_gml_file_for_cesium(self):
        self.plain_line_counter += 1
        try:
            if self.city_gml_output_file_tmp:
                schema_name_main = 'public'
                view_name_main = 'join_alkis_city_model'

                self.energy_dialog.updateGmlForCesiumProgressBar.setMaximum(2)
                self.energy_dialog.updateGmlForCesiumProgressBar.setValue(1)
                with open(self.city_gml_output_file_tmp, 'r', encoding='UTF-8') as city_gml_file:
                    soup = BeautifulSoup(city_gml_file, 'xml')
                self.energy_dialog.updateGmlForCesiumProgressBar.setValue(2)

                self.energy_dialog.updateGmlForCesiumProgressBar.setMaximum(len(soup.find_all('bldg:Building')))
                self.energy_dialog.updateGmlForCesiumProgressBar.setValue(0)
                count = 0
                for building_part in soup.find_all('bldg:Building'):
                    count += 1
                    self.energy_dialog.updateGmlForCesiumProgressBar.setValue(count)

                msg = f'''new tags such as gml id, energy demand, energy consumption, ... add to gml file successfuly\n
                All the z values are projected to 0'''
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
            else:
                msg = '(~~warning~~) City gml file has not been edited.'
                self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __cesium_browser_connector(self):
        self.plain_line_counter += 1
        try:
            subprocess.Popen("python -m http.server", cwd=f'{os.path.dirname(os.path.realpath(__file__))}',
                             shell=True)
            html_file_name = 'index_hft.html'
            mycmd = f'start firefox /new-tab localhost:8000/{html_file_name}'
            subprocess.Popen(mycmd, shell=True)
            loading_msg = "Cesium successfully opened on the Firefox browser"
            self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {loading_msg}\n')
        except Exception as error:
            self.energy_dialog.plainTextEdit.appendPlainText(f'#### {self.plain_line_counter} - (ERROR) {error}\n')

    def __open_cesium(self):
        self.plain_line_counter += 1
        self.energy_dialog.openCesiumProgressBar.setValue(0)
        self.energy_dialog.openCesiumProgressBar.setMaximum(3)
        self.energy_dialog.openCesiumProgressBar.setValue(1)
        sleep(1)
        self.energy_dialog.openCesiumProgressBar.setValue(2)
        sleep(1)
        msg = 'Browser opened successfully.'
        self.energy_dialog.plainTextEdit.appendPlainText(f'** {self.plain_line_counter} - {msg} \n')
        self.energy_dialog.openCesiumProgressBar.setValue(3)
        self.__cesium_browser_connector()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&die STEG Energy'),
                action
            )
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False

        # show the dialog
        self.energy_dialog.show()
        # Run the dialog event loop
        result = self.energy_dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
